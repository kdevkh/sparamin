generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int             @id @default(autoincrement()) @map("userId")
  clientId      String?         @unique @map("clientId")
  email         String?         @unique @map("email")
  password      String?         @map("password")
  createdAt     DateTime        @default(now()) @map("createdAt")
  updatedAt     DateTime        @updatedAt @map("updatedAt")
  role          String          @default("user") @map("role")
  comments      Comments[]
  resumes       Resumes[]
  userHistories UserHistories[]
  userInfos     UserInfos?

  @@map("Users")
}

model Resumes {
  resumeId   Int        @id @default(autoincrement()) @map("resumeId")
  userId     Int        @map("userId")
  userInfoId Int        @map("userInfoId")
  status     String     @default("APPLY") @map("status")
  title      String     @map("title")
  intro      String     @map("intro") @db.Text
  exp        String?    @map("exp") @db.Text
  skill      String?    @map("skill") @db.Text
  createdAt  DateTime   @default(now()) @map("createdAt")
  updatedAt  DateTime   @updatedAt @map("updatedAt")
  comments   Comments[]
  user       Users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userInfos  UserInfos  @relation(fields: [userInfoId], references: [userInfoId])

  @@index([userId], map: "Resumes_userId_fkey")
  @@index([userInfoId], map: "Resumes_userInfoId_fkey")
  @@map("Resumes")
}

model UserInfos {
  userInfoId   Int       @id @default(autoincrement()) @map("userInfoId")
  userId       Int       @unique @map("userId")
  name         String    @map("name")
  age          Int?      @map("age")
  gender       String?   @map("gender")
  profileImage String?   @map("profileImage")
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @updatedAt @map("updatedAt")
  resumes      Resumes[]
  user         Users     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  resumeId  Int      @map("resumeId")
  userId    Int      @map("userId")
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  resumes   Resumes  @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([resumeId], map: "Comments_resumeId_fkey")
  @@index([userId], map: "Comments_userId_fkey")
  @@map("Comments")
}

model UserHistories {
  userHistoryId String   @id @default(uuid()) @map("userHistoryId")
  userId        Int      @map("userId")
  changedField  String   @map("changedField")
  oldValue      String?  @map("oldValue")
  newValue      String   @map("newValue")
  changedAt     DateTime @default(now()) @map("changedAt")
  user          Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId], map: "UserHistories_userId_fkey")
  @@map("UserHistories")
}
